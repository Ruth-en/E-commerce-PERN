// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  ADMIN
  CLIENTE
}

model Usuario {
  id         BigInt @id @default(autoincrement())
  nombre     String
  email      String @unique
  contrasena String
  dni        String

  //relaciones
  rol              Rol
  usuarioDireccion UsuarioDireccion[] // Relación 1:N con UsuarioDireccion
}

model Direccion {
  id           BigInt @id @default(autoincrement())
  pais         String
  provincia    String
  departamento String
  localidad    String

  //relaciones
  usuarioDireccion UsuarioDireccion[] // Relación 1:N con UsuarioDireccion
}

model UsuarioDireccion {
  id          BigInt @id @default(autoincrement())
  usuarioId   BigInt @map("usuario_id")
  direccionId BigInt @map("direccion_id")

  //relación gestionada por UsuarioDireccion
  usuario   Usuario   @relation(fields: [usuarioId], references: [id]) //claves foráneas con fields y references
  direccion Direccion @relation(fields: [direccionId], references: [id])

  //relación
  ordenes OrdenCompra[] // Relación 1:N con OrdenCompra

  @@unique([usuarioId, direccionId]) // evita duplicados
}

model Categoria {
  id     BigInt @id @default(autoincrement())
  nombre String

  productos Producto[]
}

model Producto {
  id           BigInt @id @default(autoincrement())
  nombre       String
  sexo         String
  tipoProducto Int
  categoriaId  BigInt

  //Relacion getionada por Producto
  categoria Categoria @relation(fields: [categoriaId], references: [id]) //claves foráneas con fields y references

  //relaciones
  detalles Detalle[] // Relación 1:N con Detalle

  @@index([categoriaId]) //rea un índice en la base de datos sobre la columna categoriaId de la tabla Producto.
}

model Detalle {
  id         BigInt  @id @default(autoincrement())
  color      String
  marca      String
  stock      Int
  estado     Boolean
  productoId BigInt
  talleId    BigInt
  precioId   BigInt

  //Relacion getionada por Detalle
  producto Producto @relation(fields: [productoId], references: [id])
  talle    Talle    @relation(fields: [talleId], references: [id])
  precio   Precio   @relation(fields: [precioId], references: [id])

  //relaciones
  imagenes     DetalleImagen[]
  ordenesItems OrdenCompraDetalle[]

  @@index([productoId])
  @@index([talleId])
  @@index([precioId])
}

model Talle {
  id     BigInt @id @default(autoincrement())
  numero String

  //Relaciones 
  detalles Detalle[]

  @@map("talle") // indica a Prisma que el nombre real de la tabla en la base de datos es talle
}

model Imagen {
  id  BigInt @id @default(autoincrement())
  url String

  detalleImagenes DetalleImagen[]

  @@map("imagen")
}

model DetalleImagen {
  id BigInt @id @default(autoincrement())

  // Relaciones
  detalleId BigInt
  imagenId  BigInt

  //Relacion getionada por DetalleImagen
  detalle Detalle @relation(fields: [detalleId], references: [id])
  imagen  Imagen  @relation(fields: [imagenId], references: [id])

  @@map("detalle_imagen")
}

model Descuento {
  id          BigInt   @id @default(autoincrement())
  fechaInicio DateTime @map("fecha_inicio")
  fechaFinal  DateTime @map("fecha_final")
  porcentaje  Float

  precios PrecioDescuento[] // Relación N:N con Precio

  @@map("descuento")
}

model Precio {
  id           BigInt @id @default(autoincrement())
  precioCompra Float  @map("precio_compra")
  precioVenta  Float  @map("precio_venta")

  detalles   Detalle[] // Relación 1:N con Detalle
  descuentos PrecioDescuento[] // Relación N:N con Descuento

  @@map("precio")
}

model PrecioDescuento {
  precioId    BigInt
  descuentoId BigInt

  //Relacion getionada por PrecioDescuento
  precio    Precio    @relation(fields: [precioId], references: [id])
  descuento Descuento @relation(fields: [descuentoId], references: [id])

  @@id([precioId, descuentoId])
  @@map("precio_descuento")
}

model OrdenCompra {
  id                 BigInt   @id @default(autoincrement())
  fechaCompra        DateTime @map("fecha_compra")
  total              Float
  usuarioDireccionId BigInt   @map("id_usuario_direccion")

  //Relacion getionada por OrdenCompra
  usuarioDireccion UsuarioDireccion @relation(fields: [usuarioDireccionId], references: [id])

  //Relacion
  detalles OrdenCompraDetalle[] // Relación 1:N con OrdenCompraDetalle

  @@map("orden_compra")
}

model OrdenCompraDetalle {
  ordenCompraId BigInt @map("orden_compra_id")
  detalleId     BigInt

  ordenCompra OrdenCompra @relation(fields: [ordenCompraId], references: [id])
  detalle     Detalle     @relation(fields: [detalleId], references: [id])

  @@id([ordenCompraId, detalleId])
  @@map("orden_compra_detalle")
}
